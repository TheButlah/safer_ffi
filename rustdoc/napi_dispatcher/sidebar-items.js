initSidebarItems({"enum":[["Either",""],["KeyCollectionMode",""],["KeyConversion",""],["KeyFilter",""],["PropertyAttributes",""],["Status",""],["TypedArrayType",""],["ValueType",""]],"externcrate":[["derive",""]],"fn":[["noop_finalize","This function could be used for `create_buffer_with_borrowed_data` and want do noting when Buffer finalized."]],"macro":[["register_module","Deprecated register nodejs module"]],"mod":[["sys",""],["threadsafe_function",""]],"struct":[["AsyncWorkPromise",""],["CallContext","Function call context"],["CleanupEnvHook","Created by `Env::add_env_cleanup_hook` And used by `Env::remove_env_cleanup_hook`"],["Env","`Env` is used to represent a context that the underlying N-API implementation can use to persist VM-specific state."],["Error","Represent `JsError`. Return this Error in `js_function`, napi-rs will throw it as `JsError` for you. If you want throw it as `TypeError` or `RangeError`, you can use `JsTypeError/JsRangeError::from(Error).throw_into(env)`"],["EscapableHandleScope",""],["ExtendedErrorInfo",""],["FinalizeContext",""],["JsArrayBuffer",""],["JsArrayBufferValue",""],["JsBigint",""],["JsBoolean",""],["JsBuffer",""],["JsBufferValue",""],["JsDataView",""],["JsDataViewValue",""],["JsDate",""],["JsError",""],["JsExternal",""],["JsFunction",""],["JsGlobal",""],["JsNull",""],["JsNumber",""],["JsObject",""],["JsRangeError",""],["JsString",""],["JsStringLatin1",""],["JsStringUtf16",""],["JsStringUtf8",""],["JsSymbol",""],["JsTimeout",""],["JsTypeError",""],["JsTypedArray",""],["JsTypedArrayValue",""],["JsUndefined",""],["JsUnknown",""],["Module",""],["NodeVersion",""],["Property",""],["Ref",""]],"trait":[["NapiValue",""],["Task",""]],"type":[["Callback",""],["ContextlessResult",""],["Result",""],["Result",""]]});