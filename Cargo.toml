[lib]
path = "src/_lib.rs"

[package]
name = "safer-ffi"
# Keep in sync with `[dependencies.proc_macro]` and `src/proc_macro/Cargo.toml`
version = "0.0.7"
authors = ["Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"]
edition = "2021"

description = "Write safer FFI code in Rust without polluting it with unsafe code"
keywords = ["ffi", "no_std", "framework", "safety", "bindings"]
license = "MIT"
repository = "https://github.com/getditto/safer_ffi"

readme = "README.md"

exclude = ["/guide"]

[features]
default = [
    "std",
]

nightly = []

alloc = []
std = [ "alloc" ]

async-fn = [
    "safer_ffi-proc_macros/async-fn",
]

derives = ["proc_macros"] # alias
proc_macros = [
    "safer_ffi-proc_macros/proc_macros",
]
debug_proc_macros = [
    "proc_macros",
    "safer_ffi-proc_macros/verbose-expansions",
]

out-refs = ["uninit"]

headers = [
    "inventory",
    "safer_ffi-proc_macros/headers",
    "std",
]

## EXPERIMENTAL FEATURES: may break semver, may be buggy ##
experimental = [
    "csharp-headers",
    "node-js",
]
csharp-headers = ["headers"]
node-js = [
    "async-fn",
    "headers",
    "inventory",
    # "napi",
    # "napi-derive",
    "safer_ffi-proc_macros/node-js",
    # For convenience
    "proc_macros", "std",
]

[dev-dependencies]
macro_rules_attribute = "0.0.1"

[target.'cfg(not(target = "wasm32-unknown-unknown"))'.dependencies]
libc = { version = "0.2.66", default-features = false }

[dependencies]
inventory.version = "0.1.6"
log.version = "0.4.8"
paste.version = "0.1.0"
scopeguard.version = "1.1.0"
unwind_safe.version = "0.1.0"

inventory.optional = true
log.optional = true

paste.package = "mini_paste"

[dependencies.napi]
package = "napi-dispatcher"
path = "napi-dispatcher"
# optional = true

# [dependencies.napi-derive]
# path = "napi-dispatcher/napi-nodejs-derive"
# optional = true
# version = "1.0.0"
# git = "https://github.com/getditto/napi-rs"
# branch = "ditto/closure-into-jsfunction"

[dependencies.safer_ffi-proc_macros]
# package = "safer_ffi-proc_macros"
path = "src/proc_macro"
version = "0.0.7"

[dependencies.uninit]
optional = true
# Since we are relying on internals of their `Out` reference,
# we pin the version.
version = "=0.3.0"
default-features = false

[workspace]
members = [
    "src/proc_macro",
    "napi-dispatcher",
    "napi-dispatcher/nodejs-derive",
    "napi-dispatcher/nodejs-derive/src/proc_macros",
    "napi-dispatcher/wasm",
    "napi-dispatcher/wasm/src/proc_macros",
    "safer-ffi-build",
]

[package.metadata.docs.rs]
features = [
    "csharp-headers",
    "headers",
    "out-refs",
    "proc_macros",
]
rustdoc-args = ["--cfg", "docs"]
